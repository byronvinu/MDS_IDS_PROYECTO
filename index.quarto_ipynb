{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PROYECTO DE ANÁLISIS DE SUPERVIVENCIA\"\n",
        "subtitle: \"Estimación del tiempo de supervivencia de vehículos nuevos vendidos por una concesionaria, hasta que requieren su primer mantenimiento\"\n",
        "date: today\n",
        "author: \"Byron Vinueza\"\n",
        "toc: true\n",
        "toc-own-page: true\n",
        "toc-title: \"On this page\"\n",
        "categories:\n",
        "    - Machine Learning\n",
        "    - Data Science\n",
        "    - Survival Analysis\n",
        "format:\n",
        "  html:\n",
        "    html-math-method: katex\n",
        "    self-contained: true\n",
        "    code-fold: true\n",
        "execute:\n",
        "  warning: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "![](img/image.png){.center}\n",
        "\n",
        "## Business Understanding (Entendimiento del negocio/problema)\n",
        "\n",
        "* El problema central es la necesidad de estimar el tiempo de supervivencia de los vehículos nuevos vendidos por la concesionaria hasta que requieren su primer mantenimiento en el taller (aproximadamente a los 5000 kilómetros). Esto implica analizar el tiempo transcurrido desde la facturación/entrega del vehículo hasta la fecha de la primera visita al taller.\n",
        "\n",
        "* La concesionaria busca identificar los factores que influyen en la duración de este tiempo de supervivencia, con el objetivo de mejorar la calidad del servicio postventa, y así incrementar la satisfacción de los clientes.\n",
        "\n",
        "* Se espera que este análisis ayude al area de Marketing planificar estrategias y campañas de fidelización de clientes.\n",
        "\n",
        "## Data Understanding (Entendimiento de los datos)\n",
        "\n",
        "* La concencionaria cuenta con un sistema ERP que registra la información de las ventas de vehículos, y el historial de mantenimientos realizados en el taller, la información se encuentra en una base de datos oracle 11g. \n",
        "\n",
        "* Se cuenta con un datawarehouse donde la información se procesa mediante procesos ELT y se almacena en una base de datos SingleStore. \n",
        "\n",
        "* las variables mas relevantes son: \n",
        "    - id_vehiculo: identificador único del vehículo\n",
        "    - fecha_factura: fecha de facturación del vehículo\n",
        "    - modelo: modelo del vehículo\n",
        "    - familia: familia del modelo \n",
        "    - fecha de mantenimiento 5000 kilómetros: fecha de la primera visita al taller\n",
        "    - kilometraje: kilometraje del vehículo en la primera visita al taller\n",
        "\n",
        "## Data Preparation (Preparación de los datos)\n",
        "\n",
        "* La arquitectura de datos se conforma de la siguiente manera:\n",
        "    - Base de datos Oracle 11g: se extrae la información de las ventas de vehículos y mantenimientos\n",
        "    - Procesos ETL: se realizan transformaciones y limpieza de los datos\n",
        "    - Base de datos SingleStore: se almacena la información procesada\n",
        "\n",
        "![](img/arquitectura_data.png){.center}\n",
        "\n",
        "### Procedimientos almacenados\n",
        "\n",
        "### Dimensiones\n",
        "\n",
        "* DIM_EMPRESA\n",
        "\n",
        "```sql \n",
        "CREATE TABLE `DIM_EMPRESA` (\n",
        "  `SK_EMPRESA` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `EMPRESA` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_EMPRESA` (`SK_EMPRESA`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_EMPRESA`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_EMPRESA'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_EMPRESA');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- GUARDA EN UNA TABLA TEMPORAL LOS REGISTROS ACTUALIZADOS\n",
        "\tVAR_SQL=CONCAT('CREATE TABLE ',VAR_SCHEMA,'.TMP1_EMPRESA (KEY (SK_EMPRESA) USING CLUSTERED COLUMNSTORE)\n",
        "\tSELECT  R.SK_EMPRESA,R.COD_EMPRESA \n",
        "\t,IF(NVL(P.NOMBRE,R.EMPRESA)=R.EMPRESA,R.EMPRESA,P.NOMBRE) EMPRESA\n",
        "\t,IF(NVL(P.NOMBRE,R.EMPRESA)=R.EMPRESA\n",
        "\t,R.FECHA_CARGA,CURRENT_TIMESTAMP) FECHA_CARGA\n",
        "\tFROM DWH.DIM_EMPRESA R\n",
        "\tLEFT JOIN ',VAR_SCHEMA,'.S3S_ARCGMC P ON R.COD_EMPRESA=P.NO_CIA\t\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- ELIMINA LOS DATOS DE LA DIM\n",
        "\tVAR_SQL=CONCAT('TRUNCATE TABLE DWH.DIM_EMPRESA');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA LOS DATOS DE LA TMP1 A LA DIM\n",
        "\tVAR_SQL=CONCAT('\tINSERT INTO DWH.DIM_EMPRESA\n",
        "\t(SK_EMPRESA,COD_EMPRESA, EMPRESA,FECHA_CARGA)\n",
        "\tSELECT A.SK_EMPRESA,A.COD_EMPRESA, A.EMPRESA,A.FECHA_CARGA\n",
        "\tFROM ',VAR_SCHEMA,'.TMP1_EMPRESA A\t\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_EMPRESA');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_EMPRESA\n",
        "\t(COD_EMPRESA, EMPRESA)\n",
        "\tSELECT A.NO_CIA,A.NOMBRE FROM ',VAR_SCHEMA,'.S3S_ARCGMC A\n",
        "\tLEFT JOIN DWH.DIM_EMPRESA B ON A.NO_CIA=B.COD_EMPRESA\n",
        "\tWHERE B.COD_EMPRESA IS NULL\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "\n",
        "* DIM_TIPO_DOCUMENTO\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_TIPO_DOCUMENTO` (\n",
        "  `SK_TIPO_DOCUMENTO` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_TIPO_DOCUMENTO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `TIPO_DOCUMENTO` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_TIPO_DOCUMENTO`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_TIPO_DOCUMENTO` (`SK_TIPO_DOCUMENTO`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_TIPO_DOCUMENTO`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_TIPO_DOCUMENTO'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\n",
        "\t-- GUARDA EN UNA TABLA TEMPORAL LOS REGISTROS ACTUALIZADOS\n",
        "\tVAR_SQL=CONCAT('\n",
        "       UPDATE DWH.DIM_TIPO_DOCUMENTO  R\n",
        "\t\tINNER JOIN ',VAR_SCHEMA,'.S3S_FAC_DOCUMENTOS  P ON R.COD_EMPRESA=P.NO_CIA and R.COD_TIPO_DOCUMENTO=P.TIPO\n",
        "\t\tSET R.COD_TIPO_DOCUMENTO=P.TIPO,\n",
        "\t\tR.TIPO_DOCUMENTO=P.DESCRIPCION;\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_TIPO_DOCUMENTO\n",
        "\t(COD_EMPRESA,COD_TIPO_DOCUMENTO,TIPO_DOCUMENTO)\n",
        "\tSELECT A.NO_CIA, A.TIPO, A.DESCRIPCION FROM ',VAR_SCHEMA,'.S3S_FAC_DOCUMENTOS A\n",
        "\tLEFT JOIN DWH.DIM_TIPO_DOCUMENTO B ON A.NO_CIA=B.COD_EMPRESA AND A.TIPO = B.COD_TIPO_DOCUMENTO\n",
        "\tWHERE B.COD_EMPRESA IS NULL;\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "\n",
        "* DIM_VENDEDOR\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_VENDEDOR` (\n",
        "  `SK_VENDEDOR` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_VENDEDOR` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_USUARIO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `NOMBRE_VENDEDOR` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  `ESTADO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_VENDEDOR`,`COD_USUARIO`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_VENDEDOR` (`SK_VENDEDOR`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_VENDEDOR`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_VENDEDOR'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_VENDEDOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- GUARDA EN UNA TABLA TEMPORAL LOS REGISTROS ACTUALIZADOS\n",
        "\tVAR_SQL=CONCAT('CREATE TABLE ',VAR_SCHEMA,'.TMP1_VENDEDOR (KEY (SK_VENDEDOR) USING CLUSTERED COLUMNSTORE)\n",
        "\t\t\tSELECT  R.SK_VENDEDOR,R.COD_EMPRESA,      R.COD_VENDEDOR, \n",
        "    IF(NVL(P.SVVEUSUA  ,R.COD_USUARIO)=R.COD_USUARIO, R.COD_USUARIO , P.SVVEUSUA) COD_USUARIO   \n",
        "\t,IF(NVL(P.SVVENOMB,R.NOMBRE_VENDEDOR)=R.NOMBRE_VENDEDOR,R.NOMBRE_VENDEDOR,P.SVVENOMB) NOMBRE_VENDEDOR\n",
        "\t,IF(NVL(P.SVVENOMB,R.NOMBRE_VENDEDOR)=R.NOMBRE_VENDEDOR,R.FECHA_CARGA,CURRENT_TIMESTAMP) FECHA_CARGA\n",
        "\t,NVL(IF(NVL(O.ESTADO, R.ESTADO)=R.ESTADO, R.ESTADO, O.ESTADO), \"NO DEFINIDO\") ESTADO\n",
        "\tFROM DWH.DIM_VENDEDOR R\n",
        "\tLEFT JOIN ' ,VAR_SCHEMA,'.S3S_SVFVEND P ON R.COD_EMPRESA=P.NO_CIA and R.COD_VENDEDOR=P.SVVECODI\n",
        "    LEFT JOIN ' ,VAR_SCHEMA,'.S3S_NOM_EMPLEADOS O ON O.NO_CIA = P.NO_CIA  AND O.NO_EMPLE =P.SVVECODI \n",
        "\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- ELIMINA LOS DATOS DE LA DIM\n",
        "\tVAR_SQL=CONCAT('TRUNCATE TABLE DWH.DIM_VENDEDOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "-- INSERTA LOS DATOS DE LA TMP1 A LA DIM\n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_VENDEDOR\n",
        "\t(SK_VENDEDOR,COD_EMPRESA,COD_VENDEDOR,COD_USUARIO,NOMBRE_VENDEDOR,FECHA_CARGA, ESTADO)\n",
        "\tSELECT SK_VENDEDOR,COD_EMPRESA,COD_VENDEDOR,COD_USUARIO,NOMBRE_VENDEDOR,FECHA_CARGA, ESTADO\n",
        "\tFROM ' ,VAR_SCHEMA,'.TMP1_VENDEDOR ;\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_VENDEDOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT(' INSERT INTO DWH.DIM_VENDEDOR\n",
        "\t (COD_EMPRESA,COD_VENDEDOR,COD_USUARIO,NOMBRE_VENDEDOR, ESTADO)\n",
        "\tSELECT A.NO_CIA, A.SVVECODI, A.SVVEUSUA, A.SVVENOMB , A.ESTADO\n",
        "\t\t\tFROM ( SELECT A.NO_CIA , A.SVVECODI  , A.SVVEUSUA , A.SVVENOMB  , NVL(B.ESTADO,\"NO DEFINIDO\") ESTADO\n",
        "FROM ',VAR_SCHEMA,'.S3S_SVFVEND A \n",
        "LEFT JOIN ',VAR_SCHEMA,'.S3S_NOM_EMPLEADOS B ON A.NO_CIA = B.NO_CIA AND B.NO_EMPLE = A.SVVECODI \n",
        "\t\t\t\t\t\t) A\n",
        "\tLEFT JOIN DWH.DIM_VENDEDOR B ON A.NO_CIA=B.COD_EMPRESA AND A.SVVECODI= B.COD_VENDEDOR\n",
        "\tWHERE B.COD_EMPRESA IS NULL;\n",
        "\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "* DIM_TIPO_FINANCIACION\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_TIPO_FINANCIACION` (\n",
        "  `SK_TIPO_FINANCIACION` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_TIPO_FINANCIACION` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `TIPO_FINANCIACION` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  `GRUPO_ENTIDAD` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_TIPO_FINANCIACION`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_TIPO_FINANCIACION` (`SK_TIPO_FINANCIACION`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_TIPO_FINANCIACION`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_TIPO_FINANCIACION'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_TIPO_FINANCIACION');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- GUARDA EN UNA TABLA TEMPORAL LOS REGISTROS ACTUALIZADOS\n",
        "\tVAR_SQL=CONCAT('CREATE TABLE ',VAR_SCHEMA,'.TMP1_TIPO_FINANCIACION (KEY (SK_TIPO_FINANCIACION) USING CLUSTERED COLUMNSTORE)\n",
        "\t\tSELECT  R.SK_TIPO_FINANCIACION,R.COD_EMPRESA, R.COD_TIPO_FINANCIACION \n",
        "\t,IF(NVL(P.ENTIDAD,R.TIPO_FINANCIACION)=R.TIPO_FINANCIACION,R.TIPO_FINANCIACION,P.ENTIDAD) TIPO_FINANCIACION\n",
        "\t,IF(NVL(P.ENTIDAD,R.TIPO_FINANCIACION)=R.TIPO_FINANCIACION,R.FECHA_CARGA,CURRENT_TIMESTAMP) FECHA_CARGA\n",
        "\t,NVL(IF(NVL(P.GRUPO_ENTIDAD,R.GRUPO_ENTIDAD)=R.GRUPO_ENTIDAD,R.GRUPO_ENTIDAD,P.GRUPO_ENTIDAD),\"NO DEFINIDO\") GRUPO_ENTIDAD\n",
        "\tFROM DWH.DIM_TIPO_FINANCIACION R\n",
        "\tLEFT JOIN DSA.S3S_ARCCTF P ON R.COD_EMPRESA=P.NO_CIA and R.COD_TIPO_FINANCIACION=P.TIPO AND NVL(P.ESTADO,\"X\") <>\"I\"\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- ELIMINA LOS DATOS DE LA DIM\n",
        "\tVAR_SQL=CONCAT('TRUNCATE TABLE DWH.DIM_TIPO_FINANCIACION');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "-- INSERTA LOS DATOS DE LA TMP1 A LA DIM\n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_TIPO_FINANCIACION\n",
        "\t(SK_TIPO_FINANCIACION,COD_EMPRESA,COD_TIPO_FINANCIACION,TIPO_FINANCIACION,FECHA_CARGA, GRUPO_ENTIDAD)\n",
        "\tSELECT SK_TIPO_FINANCIACION,COD_EMPRESA,COD_TIPO_FINANCIACION,TIPO_FINANCIACION,FECHA_CARGA, GRUPO_ENTIDAD\n",
        "\tFROM ' ,VAR_SCHEMA,'.TMP1_TIPO_FINANCIACION ;\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_TIPO_FINANCIACION');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT(' INSERT INTO DWH.DIM_TIPO_FINANCIACION\n",
        "\t (COD_EMPRESA,COD_TIPO_FINANCIACION,TIPO_FINANCIACION,GRUPO_ENTIDAD)\n",
        "\tSELECT A.NO_CIA, A.TIPO, A.ENTIDAD, NVL(A.GRUPO_ENTIDAD, \"NO DEFINIDO\") FROM DSA.S3S_ARCCTF A\n",
        "\tLEFT JOIN DWH.DIM_TIPO_FINANCIACION B ON A.NO_CIA=B.COD_EMPRESA AND A.TIPO = B.COD_TIPO_FINANCIACION\n",
        "\tWHERE B.COD_EMPRESA IS NULL AND  NVL(A.ESTADO,\"X\") <>\"I\" ;\n",
        "\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "* DIM_FINANCIACION_VH\n",
        "\n",
        "```sql\n",
        "\n",
        "CREATE TABLE `DIM_FINANCIACION_VH` (\n",
        "  `SK_FINANCIACION` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_FINANCIACION` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FINANCIACION` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  KEY `COD_FINANCIACION` (`COD_FINANCIACION`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_FINANCIACION` (`SK_FINANCIACION`)\n",
        ");\n",
        "\n",
        "INSERT INTO DIM_FINANCIACION_VH (COD_FINANCIACION,FINANCIACION) VALUES\n",
        "\t ('-1','NO DEFINIDO'),\n",
        "\t ('CA','CUOTA DE ALCANCE'),\n",
        "\t ('CD','CREDITO DIRECTO'),\n",
        "\t ('CT','CREDITO TRADICIONAL'),\n",
        "\t ('TSN','TSN'),\n",
        "\t ('CON','CONTADO');\n",
        "   \n",
        "```\n",
        "* DIM_AGENCIA\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_AGENCIA` (\n",
        "  `SK_AGENCIA` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_AGENCIA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `AGENCIA` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `PAIS` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `PROVINCIA` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `CIUDAD` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_AGENCIA`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_AGENCIA` (`SK_AGENCIA`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_AGENCIA`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_AGENCIA'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\n",
        "\n",
        "\t-- ACTUALIZA LOS REGISTROS EN LA DIM \n",
        "\n",
        "\tVAR_SQL=CONCAT('\n",
        "\t\tUPDATE DWH.DIM_AGENCIA  R\n",
        "\t\tINNER JOIN \n",
        "\t\t(SELECT A.NO_CIA, A. CODIGO, A.NOMBRE AS AGENCIA, DECODE(B.PAIS,01,\"ECUADOR\",\"NO DEFINIDO\") AS PAIS, NVL(C.DESCRIPCION,\"NO DEFINIDO\") AS PROVINCIA, \n",
        "\t\t\t\tNVL(B.DESCRIPCION,\"NO DEFINIDO\") AS CIUDAD\n",
        "\t\t\t\tFROM ',VAR_SCHEMA,'.S3S_AGENCIAS A\n",
        "\t\t\t\tLEFT JOIN ',VAR_SCHEMA,'.S3S_ARCCCAN B ON A.CIUDAD = B.CANTON AND A.PROVINCIA = B.PROVINCIA\n",
        "\t\t\t\tLEFT JOIN ',VAR_SCHEMA,'.S3S_ARCCPRO C ON B.PROVINCIA = C.PROVINCIA)  P ON R.COD_EMPRESA=P.NO_CIA AND R.COD_AGENCIA = P.CODIGO\n",
        "\t\tSET R.AGENCIA=P.AGENCIA,\n",
        "\t\t\tR.PAIS=P.PAIS,\n",
        "\t\t\tR.PROVINCIA=P.PROVINCIA,\n",
        "\t\t\tR.CIUDAD=P.CIUDAD\n",
        "\t\t;');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_AGENCIA\n",
        "\t\t(COD_EMPRESA, COD_AGENCIA, AGENCIA, PAIS, PROVINCIA, CIUDAD)\n",
        "\t\tSELECT A.NO_CIA,A.CODIGO,A.AGENCIA,A.PAIS,A.PROVINCIA,A.CIUDAD\n",
        "\t\tFROM\n",
        "\t\t(SELECT A.NO_CIA, A. CODIGO, A.NOMBRE AS AGENCIA, DECODE(B.PAIS,01,\"ECUADOR\",\"NO DEFINIDO\") AS PAIS, NVL(C.DESCRIPCION,\"NO DEFINIDO\") AS PROVINCIA, \n",
        "\t\t\t\tNVL(B.DESCRIPCION,\"NO DEFINIDO\") AS CIUDAD\n",
        "\t\t\t\tFROM ',VAR_SCHEMA,'.S3S_AGENCIAS A\n",
        "\t\t\t\tLEFT JOIN ',VAR_SCHEMA,'.S3S_ARCCCAN B ON A.CIUDAD = B.CANTON AND A.PROVINCIA = B.PROVINCIA\n",
        "\t\t\t\tLEFT JOIN ',VAR_SCHEMA,'.S3S_ARCCPRO C ON B.PROVINCIA = C.PROVINCIA) A\n",
        "\t\tLEFT JOIN DWH.DIM_AGENCIA B ON A.NO_CIA=B.COD_EMPRESA AND A.CODIGO = B.COD_AGENCIA\n",
        "\t\tWHERE B.COD_EMPRESA IS NULL \n",
        "\t\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "* DIM_LINEA_NEGOCIO\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_LINEA_NEGOCIO` (\n",
        "  `SK_LINEA_NEGOCIO` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_LINEA_NEGOCIO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `LINEA_NEGOCIO` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_LINEA_NEGOCIO`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_LINEA_NEGOCIO` (`SK_LINEA_NEGOCIO`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_LINEA_NEGOCIO`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_LINEA_NEGOCIO'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('\n",
        "\t\t\tUPDATE DWH.DIM_LINEA_NEGOCIO  R\n",
        "\t\t\tINNER JOIN (SELECT   A.NO_CIA, A.NO_LINEA, A.DESCRIPCION\n",
        "\t\t\t\t\t\t\t\t\t\tFROM ',VAR_SCHEMA,'.S3S_ARCJLI A\n",
        "\t\t\t\t\t\t\t\t\t\tUNION \n",
        "\t\t\t\t\t\t\t\t\t\tSELECT COD_EMPRESA, S3S_ID, NAME \n",
        "\t\t\t\t\t\t\t\t\t\tFROM ',VAR_SCHEMA,'.CRM_CB_LINEANEGOCIO WHERE COD_EMPRESA = \"01\" AND s3s_id = \"ce\")  P ON R.COD_EMPRESA=P.NO_CIA AND R.COD_LINEA_NEGOCIO = P.NO_LINEA\n",
        "\t\t\tSET R.LINEA_NEGOCIO =P.DESCRIPCION ;');\n",
        "\t\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\t\tCOMMIT;\n",
        "\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_LINEA_NEGOCIO\n",
        "\t(COD_EMPRESA, COD_LINEA_NEGOCIO, LINEA_NEGOCIO)\n",
        "\tSELECT A.NO_CIA, A.NO_LINEA, A.DESCRIPCION FROM (SELECT   A.NO_CIA, A.NO_LINEA, A.DESCRIPCION\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ',VAR_SCHEMA,'.S3S_ARCJLI A\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUNION \n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT COD_EMPRESA, S3S_ID, NAME \n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ',VAR_SCHEMA,'.CRM_CB_LINEANEGOCIO WHERE COD_EMPRESA = \"01\" AND s3s_id = \"ce\") A\n",
        "\tLEFT JOIN DWH.DIM_LINEA_NEGOCIO B ON A.NO_CIA=B.COD_EMPRESA AND A.NO_LINEA = B.COD_LINEA_NEGOCIO\n",
        "\tWHERE B.COD_EMPRESA IS NULL\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "\n",
        "* DIM_VEHICULO\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `DIM_VEHICULO` (\n",
        "  `SK_VEHICULO` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_LINEA_NEGOCIO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `CHASIS` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `PLACA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `MARCA` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `ANIO_VEHICULO` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `SVMAMASTER` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `SFX` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `MODELO` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  `TIPO_VEHICULO` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COLOR` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `CLASE` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FAMILIA` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  KEY `SK_VEHICULO` (`COD_EMPRESA`,`COD_LINEA_NEGOCIO`,`CHASIS`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_VEHICULO_2` (`SK_VEHICULO`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_VEHICULO`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_VEHICULO'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\n",
        "VAR_SQL=CONCAT('UPDATE DWH.DIM_VEHICULO R\n",
        "\t\t\t\tLEFT JOIN ' ,VAR_SCHEMA,'.S3S_CAT_VEHICULO P ON R.COD_EMPRESA = P.COD_EMPRESA AND R.COD_LINEA_NEGOCIO = P.COD_LINEA_NEGOCIO AND R.CHASIS = P.CHASIS \n",
        "\t\tSET \tR.FECHA_CARGA = IF(NVL(P.PLACA,R.PLACA)=R.PLACA,R.FECHA_CARGA,CURRENT_TIMESTAMP)\n",
        "\t\t\t\t, R.PLACA = NVL(IF(NVL(P.PLACA,R.PLACA)=R.PLACA,R.PLACA,P.PLACA), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.MARCA = NVL(IF(NVL(P.MARCA,R.MARCA)=R.MARCA,R.MARCA,P.MARCA), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.ANIO_VEHICULO = NVL(IF(NVL(P.ANIO_VEHICULO,R.ANIO_VEHICULO)=R.ANIO_VEHICULO,R.ANIO_VEHICULO,P.ANIO_VEHICULO), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.SVMAMASTER = NVL(IF(NVL(P.SVMAMASTER,R.SVMAMASTER)=R.SVMAMASTER,R.SVMAMASTER,P.SVMAMASTER), \"NO DEFINIDO\") \n",
        "\t\t\t\t, R.SFX = NVL(IF(NVL(P.SFX,R.SFX)=R.SFX,R.SFX,P.SFX), \"NO DEFINIDO\") \n",
        "\t\t\t\t, R.MODELO = NVL(IF(NVL(P.MODELO,R.MODELO)=R.MODELO,R.MODELO,P.MODELO), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.TIPO_VEHICULO = NVL(IF(NVL(P.TIPO_VEHICULO,R.TIPO_VEHICULO)=R.TIPO_VEHICULO,R.TIPO_VEHICULO,P.TIPO_VEHICULO), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.COLOR = NVL(IF(NVL(P.COLOR,R.COLOR)=R.COLOR,R.COLOR,P.COLOR), \"NO DEFINIDO\")  \n",
        "\t\t\t\t, R.CLASE = NVL(IF(NVL(P.CLASE,R.CLASE)=R.CLASE,R.CLASE,P.CLASE), \"NO DEFINIDO\") \n",
        "\t\t\t\t, R.FAMILIA = NVL(IF(NVL(P.FAMILIA,R.FAMILIA)=R.FAMILIA,R.FAMILIA,P.FAMILIA), \"NO DEFINIDO\") \n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_VEHICULO\n",
        "\t\t( COD_EMPRESA, COD_LINEA_NEGOCIO, CHASIS, PLACA, MARCA,ANIO_VEHICULO,SVMAMASTER ,SFX, MODELO, TIPO_VEHICULO, COLOR, CLASE,FAMILIA)\n",
        "\t\tSELECT  A.COD_EMPRESA, A.COD_LINEA_NEGOCIO, A.CHASIS, NVL(A.PLACA,\"NO DEFINIDO\"), NVL(A.MARCA,\"NO DEFINIDO\"), \n",
        "\t\tNVL(A.ANIO_VEHICULO,\"NO DEFINIDO\"), NVL(A.SVMAMASTER,\"NO DEFINIDO\"),NVL(A.SFX,\"NO DEFINIDO\"), NVL(A.MODELO, \"NO DEFINIDO\"),\n",
        "\t\tNVL(A.TIPO_VEHICULO, \"NO DEFINIDO\"), NVL(A.COLOR, \"NO DEFINIDO\"), NVL(A.CLASE, \"NO DEFINIDO\") , NVL(A.FAMILIA, \"NO DEFINIDO\") \n",
        "\t\tFROM DSA.S3S_CAT_VEHICULO A\n",
        "\t\tLEFT JOIN DWH.DIM_VEHICULO B ON A.COD_LINEA_NEGOCIO = B.COD_LINEA_NEGOCIO AND A.COD_EMPRESA = B.COD_EMPRESA AND A.CHASIS = B.CHASIS\n",
        "\t\tWHERE B.COD_EMPRESA IS NULL\n",
        "\t\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "```\n",
        "\n",
        "* DIM_TECNICO_ASESOR\n",
        "\n",
        "```sql\n",
        "\n",
        "CREATE TABLE `DIM_TECNICO_ASESOR` (\n",
        "  `SK_TECNICO_ASESOR` bigint(11) NOT NULL AUTO_INCREMENT,\n",
        "  `COD_EMPRESA` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `COD_TECNICO_ASESOR` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `TECNICO_ASESOR` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  `FECHA_CARGA` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en la que se realizo la carga' ,\n",
        "  `ESTADO` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n",
        "  KEY `COD_EMPRESA` (`COD_EMPRESA`,`COD_TECNICO_ASESOR`) USING CLUSTERED COLUMNSTORE,\n",
        "  SHARD KEY `SK_TECNICO_ASESOR` (`SK_TECNICO_ASESOR`)\n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_DIM_TECNICO_ASESOR`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(4000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "\tINSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('DIMENSION',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_DIM_TECNICO_ASESOR'),VAR_DT_INICIO);\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_TECNICO_ASESOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- GUARDA EN UNA TABLA TEMPORAL LOS REGISTROS ACTUALIZADOS\n",
        "\tVAR_SQL=CONCAT('CREATE TABLE ',VAR_SCHEMA,'.TMP1_TECNICO_ASESOR (KEY (SK_TECNICO_ASESOR) USING CLUSTERED COLUMNSTORE)\n",
        "\tSELECT  R.SK_TECNICO_ASESOR,R.COD_EMPRESA, R.COD_TECNICO_ASESOR \n",
        "\t,IF(NVL(P.NOMBRE,R.TECNICO_ASESOR)=R.TECNICO_ASESOR,R.TECNICO_ASESOR,P.NOMBRE) TECNICO_ASESOR\n",
        "\t,IF(NVL(P.NOMBRE,R.TECNICO_ASESOR)=R.TECNICO_ASESOR,R.FECHA_CARGA,CURRENT_TIMESTAMP) FECHA_CARGA\n",
        "\t,NVL(IF(NVL(P.ESTADO,R.ESTADO)=R.ESTADO, R.ESTADO, P.ESTADO), \"NO DEFINIDO\") ESTADO\n",
        "\tFROM DWH.DIM_TECNICO_ASESOR R\n",
        "\tLEFT JOIN ',VAR_SCHEMA,'.S3S_SE_TECNIASESOR P ON R.COD_EMPRESA=P.NO_CIA AND R.COD_TECNICO_ASESOR = P.TECNIASESOR_ID\n",
        "\t ;\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- ELIMINA LOS DATOS DE LA DIM\n",
        "\tVAR_SQL=CONCAT('TRUNCATE TABLE DWH.DIM_TECNICO_ASESOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA LOS DATOS DE LA TMP1 A LA DIM\n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_TECNICO_ASESOR\n",
        "\t(SK_TECNICO_ASESOR,COD_EMPRESA, COD_TECNICO_ASESOR,TECNICO_ASESOR,FECHA_CARGA, ESTADO)\n",
        "\tSELECT A.SK_TECNICO_ASESOR,A.COD_EMPRESA, A.COD_TECNICO_ASESOR, A.TECNICO_ASESOR,A.FECHA_CARGA, ESTADO\n",
        "\tFROM ',VAR_SCHEMA,'.TMP1_TECNICO_ASESOR A\t\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\t\n",
        "\tVAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP1_TECNICO_ASESOR');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "\t-- INSERTA NUEVOS REGISTROS A LA DIM \n",
        "\tVAR_SQL=CONCAT('INSERT INTO DWH.DIM_TECNICO_ASESOR\n",
        "\t(COD_EMPRESA, COD_TECNICO_ASESOR, TECNICO_ASESOR, ESTADO)\n",
        "\tSELECT A.NO_CIA, A.TECNIASESOR_ID, A.NOMBRE, NVL(A.ESTADO, \"NO DEFINIDO\") ESTADO \n",
        "FROM ',VAR_SCHEMA,'.S3S_SE_TECNIASESOR A\n",
        "\tLEFT JOIN DWH.DIM_TECNICO_ASESOR B ON A.NO_CIA=B.COD_EMPRESA AND A.TECNIASESOR_ID = B.COD_TECNICO_ASESOR\n",
        "\tWHERE B.COD_EMPRESA IS NULL\n",
        "\t');\n",
        "\t EXECUTE IMMEDIATE VAR_SQL;\n",
        "\tCOMMIT;\n",
        "\n",
        "END;\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "### Tabla de Hechos\n",
        "\n",
        "* FC_VENTA_VS_MANTENIMIENTO\n",
        "\n",
        "```sql\n",
        "CREATE TABLE `FC_VENTA_VS_MANTENIMIENTO` (\n",
        "  `SK_EMPRESA` bigint(20) DEFAULT 1,\n",
        "  `SK_FECHA` bigint(20) DEFAULT 19700101,\n",
        "  `SK_FACTURA` text CHARACTER SET utf8 COLLATE utf8_general_ci,\n",
        "  `NO_FISICO` text CHARACTER SET utf8 COLLATE utf8_general_ci,\n",
        "  `SK_TIPO_DOCUMENTO` bigint(11) DEFAULT 11,\n",
        "  `SK_VENDEDOR` bigint(11) DEFAULT NULL,\n",
        "  `SK_TIPO_FINANCIACION` bigint(11) DEFAULT 1,\n",
        "  `SK_AGENCIA` bigint(11) DEFAULT 1,\n",
        "  `SK_AGENCIA_FACTURA` bigint(11) DEFAULT 1,\n",
        "  `SK_LINEA_NEGOCIO` bigint(11) DEFAULT 1,\n",
        "  `SK_FECHA_SALIDA` bigint(20) DEFAULT 19700101,\n",
        "  `SK_VEHICULO` bigint(11) DEFAULT 1,\n",
        "  `SK_AGENCIA_MNT1` bigint(11) DEFAULT 1,\n",
        "  `SK_TECNICO_ASESOR1` bigint(11) DEFAULT 1,\n",
        "  `MANTENIMIENTO_1000` decimal(18,0) DEFAULT NULL,\n",
        "  `SK_FECHA_MANTENIMIENTO_1000` bigint(20) DEFAULT 19700101,\n",
        "  `SK_AGENCIA_MNT5` bigint(11) DEFAULT 1,\n",
        "  `SK_TECNICO_ASESOR5` bigint(11) DEFAULT 1,\n",
        "  `MANTENIMIENTO_5000` decimal(18,0) DEFAULT NULL,\n",
        "  `SK_FECHA_MANTENIMIENTO_5000` bigint(20) DEFAULT 19700101,\n",
        "  `SK_AGENCIA_MNT10` bigint(11) DEFAULT 1,\n",
        "  `SK_TECNICO_ASESOR10` bigint(11) DEFAULT 1,\n",
        "  `MANTENIMIENTO_10000` decimal(18,0) DEFAULT NULL,\n",
        "  `SK_FECHA_MANTENIMIENTO_10000` bigint(20) DEFAULT 19700101,\n",
        "  `SK_FINANCIACION` bigint(20) DEFAULT NULL,\n",
        "  KEY `FC_VENTAS_NUEVOS_EXONERADOS_MANTENIMIENTOS` (`SK_FECHA`,`SK_FACTURA`,`SK_VEHICULO`) USING CLUSTERED COLUMNSTORE\n",
        "  , SHARD KEY () \n",
        ") ;\n",
        "\n",
        "CREATE OR REPLACE PROCEDURE `CRG_FC_VENTA_VS_MANTENIMIENTO`(VAR_SCHEMA varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL, VAR_EMPRESA varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL, VAR_FECHA_INICIO date NULL, VAR_FECHA_FIN date NULL, VAR_LINEA_NEGOCIO_NUEVOS varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL, VAR_LINEA_NEGOCIO_EXONERADOS varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL, VAR_LINEA_NEGOCIO_MNT varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL) RETURNS void AS\n",
        "DECLARE\n",
        "\tVAR_SQL VARCHAR(8000);\n",
        "\tVAR_ERROR VARCHAR(4000);\n",
        "\tVAR_DT_INICIO TIMESTAMP = CURRENT_TIMESTAMP;\n",
        "BEGIN\n",
        "START TRANSACTION;\n",
        "INSERT INTO CTR.LOG_PROCESO (MODULO, ETAPA,DT_FECHA_INICIO) VALUES ('TABLA DE HECHOS',CONCAT('INICIO ',VAR_SCHEMA,'.CRG_FC_VENTA_VS_MANTENIMIENTO'),VAR_DT_INICIO);\n",
        "COMMIT;\n",
        "\n",
        "VAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP_VENTAS_NUEVOS_EXONERADOS');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "\n",
        "VAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP_VENTA_MANTENIMIENTO');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "\n",
        "/*Descripción: Creación de la tabla temporal de las ventas efectivas en las líneas de negocios nuevos y exonerados exluyendo a los clientes \n",
        "* \tCARLOS LARREA Y COMERCIAL HIDROVO*/\n",
        "\n",
        "VAR_SQL=CONCAT(' CREATE TABLE DSA.TMP_VENTAS_NUEVOS_EXONERADOS (KEY (NO_FACTU,CHASIS) USING CLUSTERED COLUMNSTORE)\n",
        "                    SELECT\n",
        "                            AA.FECHA , AA.NO_FACTU , AA.NO_FISICO , AA.TIPO_DOC , AA.NO_VENDEDOR\n",
        "                            , BB.CHASIS\n",
        "                            , AA.LINEA , AA.NO_PEDIDO\n",
        "                            , NVL(AA.CENTRO_ORIGEN,AA.CENTROD) COD_AGENCIA\n",
        "                            , AA.CENTROD COD_AGENCIA_FACTURA\n",
        "                            , AA.NO_CIA COD_EMPRESA\n",
        "                            , AA.LINEA_NEGOCIO\n",
        "                            , AA.FECHA_SALIDA\n",
        "                            , CASE WHEN (AA.LINEA IN (\"CY\", \"C8\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C9\", \"D1\")) THEN \"TSN\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR = 0) AND (I.CUOTA_DE_ALCANCE = 0)) THEN \"CON\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR > 0) AND (AA.LINEA  = \"CB\")) THEN \"CD\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR = 0) AND (I.CUOTA_DE_ALCANCE > 0) AND (AA.LINEA  = \"CB\")) THEN \"CA\"\n",
        "                                        WHEN (AA.LINEA  = \"SV\") THEN \"CA\"\n",
        "                                        WHEN (((I.CUOTA_DE_ALCANCE > 0) OR (I.SALDO_FINANCIAR= 0)) AND (AA.LINEA  <> \"CB\")) THEN \"CT\"\n",
        "                                        WHEN (AA.LINEA  = \"VE\") THEN \"CD\"\n",
        "                            ELSE \"CT\" END AS COD_FINANCIACION\n",
        "                    FROM  \n",
        "                            ',VAR_SCHEMA,'.S3S_FAC_VENTAS_CAB AA\n",
        "                            INNER JOIN ',VAR_SCHEMA,'.S3S_FAC_VENTAS_VEHICULOS BB ON AA.NO_CIA =BB.NO_CIA AND AA.RUTA =BB.RUTA AND AA.TIPO_DOC =BB.TIPO_DOC AND AA.NO_FACTU =BB.NO_FACTU\n",
        "                            INNER JOIN ',VAR_SCHEMA,'.S3S_SVFCOTI I ON  AA.CENTROD = I.CENTRO AND AA.NO_PEDIDO = I.NUMERO_COTIZACION AND I.SVLICODI = AA.LINEA_NEGOCIO  AND AA.NO_CIA = I.NO_CIA\n",
        "                    WHERE \n",
        "                            AA.NO_CIA = \"',VAR_EMPRESA,'\"\n",
        "                            AND AA.LINEA_NEGOCIO = \"',VAR_LINEA_NEGOCIO_NUEVOS,'\"\n",
        "                            AND NVL(AA.IND_ANU_DEV,\"X\")<>\"A\"\n",
        "                            AND DATE(AA.FECHA) BETWEEN \"',VAR_FECHA_INICIO,'\" AND \"',VAR_FECHA_FIN,'\"  \n",
        "                            AND AA.NO_CLIENTE NOT IN (69157,186117,20781,23437,63323)\n",
        "                ');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "\n",
        "VAR_SQL=CONCAT('INSERT INTO ',VAR_SCHEMA,'.TMP_VENTAS_NUEVOS_EXONERADOS\n",
        "                    SELECT\n",
        "                            AA.FECHA\n",
        "                            , AA.NO_FACTU\n",
        "                            , AA.NO_FISICO\n",
        "                            , AA.TIPO_DOC , AA.NO_VENDEDOR\n",
        "                            , BB.CHASIS\n",
        "                            , AA.LINEA , AA.NO_PEDIDO\n",
        "                            , NVL(AA.CENTRO_ORIGEN,AA.CENTROD) COD_AGENCIA\n",
        "                            , AA.CENTROD COD_AGENCIA_FACTURA\n",
        "                            , AA.NO_CIA COD_EMPRESA\n",
        "                            , AA.LINEA_NEGOCIO\n",
        "                            , AA.FECHA_SALIDA\n",
        "                            , CASE WHEN (AA.LINEA IN (\"CY\", \"C8\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C9\", \"D1\")) THEN \"TSN\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR = 0) AND (I.CUOTA_DE_ALCANCE = 0)) THEN \"CON\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR > 0) AND (AA.LINEA  = \"CB\")) THEN \"CD\"\n",
        "                                        WHEN ((I.SALDO_FINANCIAR = 0) AND (I.CUOTA_DE_ALCANCE > 0) AND (AA.LINEA  = \"CB\")) THEN \"CA\"\n",
        "                                        WHEN (AA.LINEA  = \"SV\") THEN \"CA\"\n",
        "                                        WHEN (((I.CUOTA_DE_ALCANCE > 0) OR (I.SALDO_FINANCIAR= 0)) AND (AA.LINEA  <> \"CB\")) THEN \"CT\"\n",
        "                                        WHEN (AA.LINEA  = \"VE\") THEN \"CD\"\n",
        "                                ELSE \"CT\" END AS COD_FINANCIACION\n",
        "                    FROM \n",
        "                            ',VAR_SCHEMA,'.S3S_FAC_VENTAS_CAB AA\n",
        "                            INNER JOIN ',VAR_SCHEMA,'.S3S_FAC_VENTAS_VEHICULOS BB ON AA.NO_CIA =BB.NO_CIA AND BB.RUTA =AA.RUTA AND BB.TIPO_DOC =AA.TIPO_DOC AND BB.NO_FACTU =AA.NO_FACTU\n",
        "                            INNER JOIN ',VAR_SCHEMA,'.S3S_SVFCOTI I ON  AA.CENTROD = I.CENTRO AND AA.NO_PEDIDO = I.NUMERO_COTIZACION AND I.SVLICODI = AA.LINEA_NEGOCIO  AND AA.NO_CIA = I.NO_CIA\n",
        "                    WHERE \n",
        "                            AA.NO_CIA = \"',VAR_EMPRESA,'\"\n",
        "                            AND AA.LINEA_NEGOCIO = \"',VAR_LINEA_NEGOCIO_EXONERADOS,'\"\n",
        "                            AND NVL(AA.IND_ANU_DEV,\"X\")<> \"A\"\n",
        "                            AND AA.TIPO_DOC  IN (\"EX\",\"NE\")\n",
        "                            AND DATE(AA.FECHA) BETWEEN \"',VAR_FECHA_INICIO,'\"   AND \"',VAR_FECHA_FIN,'\" \n",
        "                            AND AA.NO_CLIENTE NOT IN (69157,186117,20781,23437,63323) \n",
        "                    ');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "\n",
        "-- Descripción: Creación de la tabla temporal de las ordenes creadas de los vehículos que ingresan al taller a mantenimiento de los  1000, 5000, 10000 km \n",
        "\n",
        "VAR_SQL=CONCAT('CREATE TABLE ',VAR_SCHEMA,'.TMP_VENTA_MANTENIMIENTO (KEY (CHASIS) USING CLUSTERED COLUMNSTORE)\n",
        "                    SELECT \n",
        "                            T.*\n",
        "                            , T1.CODIGO AS AGENCIA_1 \n",
        "                            , T1.COD_TECNICO_ASESOR AS COD_TECNICO_ASESOR1\n",
        "                            , T1.KM_RELACIONADO AS K1\n",
        "                            , T1.FECHA_FACTURA FECHA_FACTURA_K1\n",
        "                            , T2.CODIGO AS AGENCIA_5\n",
        "                            , T2.COD_TECNICO_ASESOR AS COD_TECNICO_ASESOR5\n",
        "                            , T2.KM_RELACIONADO AS K5\n",
        "                            , T2.FECHA_FACTURA FECHA_FACTURA_K5\n",
        "                            , T3.CODIGO AS AGENCIA_10\n",
        "                            , T3.COD_TECNICO_ASESOR AS COD_TECNICO_ASESOR10\n",
        "                            , T3.KM_RELACIONADO AS K10\n",
        "                            , T3.FECHA_FACTURA FECHA_FACTURA_K10\n",
        "                    FROM \n",
        "                            ',VAR_SCHEMA,'.TMP_VENTAS_NUEVOS_EXONERADOS  T\n",
        "                            LEFT JOIN (\n",
        "                                                    SELECT\n",
        "                                                            B.CHASIS_NO  , A.KILOMETRAJE, A.CODIGO\n",
        "                                                            , A.TECNIASESOR_ID COD_TECNICO_ASESOR\n",
        "                                                            , (D.KM_RELACIONADO) KM_RELACIONADO\n",
        "                                                            , A.FECHA_CIERRE FECHA_FACTURA\n",
        "                                                    FROM \n",
        "                                                            ',VAR_SCHEMA,'.S3S_SE_ORDENREP A\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_VEHICULOS B ON A.NO_CIA = B.NO_CIA AND  A.NUMCBS = B.NUMCBS\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_TRABORDEN C ON A.NO_CIA = C.NO_CIA AND A.CODIGO = C.CODIGO AND A.ORDENREP_ID = C.ORDENREP_ID\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_MENUSERV3 D ON C.NO_CIA = D.NO_CIA AND C.CODSERV1 = D.CODSERV1 AND C.CODSERV2 = D.CODSERV2 AND C.CODSERV3 = D.CODSERV3\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_ORDENREP_NC NC ON NC.NO_CIA = A.NO_CIA AND A.ORDENREP_ID = NC.ORDENREP_ID_ORIGEN\n",
        "                                                    WHERE \n",
        "                                                            A.NO_CIA = \"',VAR_EMPRESA,'\"\n",
        "                                                            AND A.LINEA_NEGOCIO = \"',VAR_LINEA_NEGOCIO_MNT,'\"\n",
        "                                                            AND A.ESTADO_ID in (\"85\",\"90\")\n",
        "                                                            AND D.KM_RELACIONADO = 1000\n",
        "                                                            AND NC.ORDENREP_ID_ORIGEN IS NULL\n",
        "                                                ) T1  ON T1.CHASIS_NO = T.CHASIS AND YEAR(T1.FECHA_FACTURA) >= YEAR(T.FECHA)\n",
        "                            LEFT JOIN (\n",
        "                                                    SELECT\n",
        "                                                            B.CHASIS_NO , A.KILOMETRAJE, A.CODIGO\n",
        "                                                            , A.TECNIASESOR_ID COD_TECNICO_ASESOR\n",
        "                                                            , NVL(A.FECHA_FACTURA,A.FECHA_CIERRE) FECHA_FACTURA\n",
        "                                                            , (D.KM_RELACIONADO) KM_RELACIONADO\n",
        "                                                    FROM \n",
        "                                                            ',VAR_SCHEMA,'.S3S_SE_ORDENREP A\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_VEHICULOS B ON A.NO_CIA = B.NO_CIA AND  A.NUMCBS = B.NUMCBS\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_TRABORDEN C ON A.NO_CIA = C.NO_CIA AND A.CODIGO = C.CODIGO AND A.ORDENREP_ID = C.ORDENREP_ID\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_MENUSERV3 D ON C.NO_CIA = D.NO_CIA AND C.CODSERV1 = D.CODSERV1 AND C.CODSERV2 = D.CODSERV2 AND C.CODSERV3 = D.CODSERV3\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_ORDENREP_NC NC ON NC.NO_CIA = A.NO_CIA AND A.ORDENREP_ID = NC.ORDENREP_ID_ORIGEN\n",
        "                                                    WHERE \n",
        "                                                            A.NO_CIA = \"',VAR_EMPRESA,'\"\n",
        "                                                            AND A.LINEA_NEGOCIO = \"',VAR_LINEA_NEGOCIO_MNT,'\"\n",
        "                                                            AND A.ESTADO_ID in (\"85\",\"90\")\n",
        "                                                            AND D.KM_RELACIONADO = 5000\n",
        "                                                            AND NC.ORDENREP_ID_ORIGEN IS NULL\n",
        "                                                ) T2  ON T2.CHASIS_NO = T.CHASIS\n",
        "                            LEFT JOIN (\n",
        "                                                    SELECT\n",
        "                                                            B.CHASIS_NO , A.KILOMETRAJE, A.CODIGO   \n",
        "                                                            , A.TECNIASESOR_ID COD_TECNICO_ASESOR\n",
        "                                                            , NVL(A.FECHA_FACTURA,A.FECHA_CIERRE) FECHA_FACTURA\n",
        "                                                            , (D.KM_RELACIONADO) KM_RELACIONADO\n",
        "                                                    FROM \n",
        "                                                            ',VAR_SCHEMA,'.S3S_SE_ORDENREP A\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_VEHICULOS B ON A.NO_CIA = B.NO_CIA AND  A.NUMCBS = B.NUMCBS\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_TRABORDEN C ON A.NO_CIA = C.NO_CIA AND A.CODIGO = C.CODIGO AND A.ORDENREP_ID = C.ORDENREP_ID\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_MENUSERV3 D ON C.NO_CIA = D.NO_CIA AND C.CODSERV1 = D.CODSERV1 AND C.CODSERV2 = D.CODSERV2 AND C.CODSERV3 = D.CODSERV3\n",
        "                                                            LEFT JOIN ',VAR_SCHEMA,'.S3S_SE_ORDENREP_NC NC ON NC.NO_CIA = A.NO_CIA AND A.ORDENREP_ID = NC.ORDENREP_ID_ORIGEN\n",
        "                                                    WHERE \n",
        "                                                            A.NO_CIA = \"',VAR_EMPRESA,'\"\n",
        "                                                            AND A.LINEA_NEGOCIO = \"',VAR_LINEA_NEGOCIO_MNT,'\"\n",
        "                                                            AND A.ESTADO_ID in (\"85\",\"90\")\n",
        "                                                            AND D.KM_RELACIONADO = 10000\n",
        "                                                            AND NC.ORDENREP_ID_ORIGEN IS NULL\n",
        "                                                ) T3  ON T3.CHASIS_NO = T.CHASIS \n",
        "                    ');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\t\n",
        "\n",
        "VAR_SQL=CONCAT('DELETE FROM DWH.FC_VENTA_VS_MANTENIMIENTO A \n",
        "                    WHERE A.SK_EMPRESA = (SELECT SK_EMPRESA FROM DWH.DIM_EMPRESA WHERE COD_EMPRESA = \"',VAR_EMPRESA,'\")\n",
        "                    AND SK_FECHA >= (SELECT SK_FECHA FROM DWH.DIM_FECHA WHERE FECHA = \"',VAR_FECHA_INICIO,'\") \n",
        "                    AND SK_FECHA <= (SELECT SK_FECHA FROM DWH.DIM_FECHA WHERE FECHA = \"',VAR_FECHA_FIN,'\") \n",
        "                    ');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\t\t\t\n",
        "COMMIT;\n",
        "\n",
        "/*Descripción: Inserción de registros en la tabla de hechos */\n",
        "\n",
        "VAR_SQL=CONCAT('INSERT INTO DWH.FC_VENTA_VS_MANTENIMIENTO \n",
        "                    SELECT \n",
        "                            EM.SK_EMPRESA\n",
        "                            , NVL(FF.SK_FECHA,19700101) SK_FECHA\n",
        "                            , AA.NO_FACTU\n",
        "                            , AA.NO_FISICO\n",
        "                            , TD.SK_TIPO_DOCUMENTO\n",
        "                            , DV.SK_VENDEDOR \n",
        "                            , TF.SK_TIPO_FINANCIACION \n",
        "                            , NVL(AG1.SK_AGENCIA,1) SK_AGENCIA\n",
        "                            , NVL(AG2.SK_AGENCIA,1) SK_AGENCIA_FACTURA\n",
        "                            , NVL(LI.SK_LINEA_NEGOCIO,1) SK_LINEA_NEGOCIO\n",
        "                            , NVL(FF3.SK_FECHA ,19700101) SK_FECHA_SALIDA\n",
        "                            , NVL(VEH.SK_VEHICULO,1) SK_VEHICULO\n",
        "                            , NVL(A1.SK_AGENCIA,1) SK_AGENCIA_MNT1\n",
        "                            , NVL(TA1.SK_TECNICO_ASESOR,1) SK_TECNICO_ASESOR1\n",
        "                            , NVL(AA.K1,-1) AS MANTENIMIENTO_1000\n",
        "                            , NVL(FK1.SK_FECHA,19700101) AS SK_FECHA_MANTENIMIENTO_1000\n",
        "                            , NVL(A5.SK_AGENCIA,1) SK_AGENCIA_MNT5\n",
        "                            , NVL(TA5.SK_TECNICO_ASESOR,1) SK_TECNICO_ASESOR5\n",
        "                            , NVL(AA.K5,-1) AS MANTENIMIENTO_5000\n",
        "                            , NVL(FK5.SK_FECHA,19700101)  AS SK_FECHA_MANTENIMIENTO_5000\n",
        "                            , NVL(A10.SK_AGENCIA,1) SK_AGENCIA_MNT10\n",
        "                            , NVL(TA10.SK_TECNICO_ASESOR,1) SK_TECNICO_ASESOR10\n",
        "                            , NVL(AA.K10,-1) AS MANTENIMIENTO_10000\n",
        "                            , NVL(FK10.SK_FECHA,19700101)  AS SK_FECHA_MANTENIMIENTO_10000\n",
        "                            , NVL(FV.SK_FINANCIACION,1 ) SK_FINANCIACION\n",
        "                    FROM \n",
        "                            DSA.TMP_VENTA_MANTENIMIENTO AA\n",
        "                            LEFT JOIN DWH.DIM_EMPRESA EM ON EM.COD_EMPRESA=AA.COD_EMPRESA\n",
        "                            LEFT JOIN DWH.DIM_FECHA FF ON DATE(FF.FECHA)=DATE(AA.FECHA)\n",
        "                            LEFT JOIN DWH.DIM_TIPO_DOCUMENTO TD ON TD.COD_TIPO_DOCUMENTO=AA.TIPO_DOC AND  TD.COD_EMPRESA =AA.COD_EMPRESA\n",
        "                            LEFT JOIN DWH.DIM_VENDEDOR DV ON DV.COD_VENDEDOR =AA.NO_VENDEDOR AND DV.COD_EMPRESA=AA.COD_EMPRESA\n",
        "                            LEFT JOIN DWH.DIM_TIPO_FINANCIACION TF  ON TF.COD_TIPO_FINANCIACION =AA.LINEA AND TF.COD_EMPRESA =AA.COD_EMPRESA\n",
        "                            LEFT JOIN DWH.DIM_FINANCIACION_VH FV ON FV.COD_FINANCIACION = AA.COD_FINANCIACION\n",
        "                            LEFT JOIN DWH.DIM_AGENCIA AG1 ON AG1.COD_EMPRESA =AA.COD_EMPRESA AND AG1.COD_AGENCIA =AA.COD_AGENCIA\n",
        "                            LEFT JOIN DWH.DIM_AGENCIA AG2 ON AG2.COD_EMPRESA =AA.COD_EMPRESA AND AG2.COD_AGENCIA =AA.COD_AGENCIA_FACTURA\n",
        "                            LEFT JOIN DWH.DIM_LINEA_NEGOCIO LI ON LI.COD_EMPRESA =AA.COD_EMPRESA AND LI.COD_LINEA_NEGOCIO =AA.LINEA_NEGOCIO \n",
        "                            LEFT JOIN DWH.DIM_FECHA FF3 ON  DATE(FF3.FECHA) = DATE(AA.FECHA_SALIDA)\n",
        "                            LEFT JOIN DWH.DIM_VEHICULO VEH ON VEH.CHASIS=AA.CHASIS AND VEH.COD_EMPRESA = AA.COD_EMPRESA AND VEH.COD_LINEA_NEGOCIO =AA.LINEA_NEGOCIO\n",
        "                            LEFT JOIN DWH.DIM_FECHA FK1 ON DATE(FK1.FECHA) = DATE(AA.FECHA_FACTURA_K1) \n",
        "                            LEFT JOIN DWH.DIM_FECHA FK5 ON DATE(FK5.FECHA) = DATE(AA.FECHA_FACTURA_K5) \n",
        "                            LEFT JOIN DWH.DIM_FECHA FK10 ON DATE(FK10.FECHA) = DATE(AA.FECHA_FACTURA_K10) \n",
        "                            LEFT JOIN DWH.DIM_AGENCIA A1 ON AA.COD_EMPRESA = A1.COD_EMPRESA AND AA.AGENCIA_1 = A1.COD_AGENCIA \n",
        "                            LEFT JOIN DWH.DIM_AGENCIA A5 ON AA.COD_EMPRESA = A5.COD_EMPRESA AND AA.AGENCIA_5 = A5.COD_AGENCIA \n",
        "                            LEFT JOIN DWH.DIM_AGENCIA A10 ON AA.COD_EMPRESA = A10.COD_EMPRESA AND AA.AGENCIA_10 = A10.COD_AGENCIA \n",
        "                            LEFT JOIN DWH.DIM_TECNICO_ASESOR TA1 ON AA.COD_EMPRESA = TA1.COD_EMPRESA AND AA.COD_TECNICO_ASESOR1 = TA1.COD_TECNICO_ASESOR \n",
        "                            LEFT JOIN DWH.DIM_TECNICO_ASESOR TA5 ON AA.COD_EMPRESA = TA5.COD_EMPRESA AND AA.COD_TECNICO_ASESOR5 = TA5.COD_TECNICO_ASESOR \n",
        "                            LEFT JOIN DWH.DIM_TECNICO_ASESOR TA10 ON AA.COD_EMPRESA = TA10.COD_EMPRESA AND AA.COD_TECNICO_ASESOR10 = TA10.COD_TECNICO_ASESOR \n",
        "                ');\n",
        "EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\t\n",
        "\n",
        "VAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP_VENTAS_NUEVOS_EXONERADOS');\n",
        "    EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "\n",
        "VAR_SQL=CONCAT('DROP TABLE IF EXISTS ',VAR_SCHEMA,'.TMP_VENTA_MANTENIMIENTO');\n",
        "    EXECUTE IMMEDIATE VAR_SQL;\n",
        "COMMIT;\n",
        "        \n",
        "END;\n",
        "\n",
        "```\n",
        "\n",
        "### Vista \n",
        "\n",
        "* VW_VENTA_VS_MANTENIMIENTO\n",
        "\n",
        "```sql\n",
        "CREATE  VIEW `VW_VENTA_VS_MANTENIMIENTO` AS\n",
        "SELECT\n",
        "\t`B`.`EMPRESA` AS `EMPRESA`,\n",
        "\tDATE(`C`.`FECHA`) AS `FECHA`,\n",
        "\t`D`.`TIPO_DOCUMENTO` AS `TIPO_DOCUMENTO`,\n",
        "\t`A`.`SK_FACTURA` AS `FACTURA`,\n",
        "\t`E`.`NOMBRE_VENDEDOR` AS `NOMBRE_VENDEDOR`,\n",
        "\t`F`.`TIPO_FINANCIACION` AS `TIPO_FINANCIACION`,\n",
        "\t`G`.`FINANCIACION` AS `FINANCIACION`,\n",
        "\t`H`.`AGENCIA` AS `AGENCIA`,\n",
        "\t`I`.`AGENCIA` AS `AGENCIA_FACTURA`,\n",
        "\t`J`.`LINEA_NEGOCIO` AS `LINEA_NEGOCIO`,\n",
        "\tDATE(`K`.`FECHA`) AS `FECHA_SALIDA`,\n",
        "\t`L`.`CHASIS` AS `CHASIS`,\n",
        "\t`L`.`FAMILIA` AS `FAMILIA_VH`,\n",
        "\t`L`.`MODELO` AS `MODELO`,\n",
        "\t`A`.`MANTENIMIENTO_1000` AS `MANTENIMIENTO_1000`,\n",
        "\tDATE(`M`.`FECHA`) AS `FECHA_MNT_1000`,\n",
        "\t`P`.`AGENCIA` AS `AGENCIA_MNT_1000`,\n",
        "\t`S`.`TECNICO_ASESOR` AS `TECNICO_ASESOR_MNT_1000`,\n",
        "\t`A`.`MANTENIMIENTO_5000` AS `MANTENIMIENTO_5000`,\n",
        "\tDATE(`N`.`FECHA`) AS `FECHA_MNT_5000`,\n",
        "\t`Q`.`AGENCIA` AS `AGENCIA_MNT_5000`,\n",
        "\t`T`.`TECNICO_ASESOR` AS `TECNICO_ASESOR_MNT_5000`,\n",
        "\t`A`.`MANTENIMIENTO_10000` AS `MANTENIMIENTO_10000`,\n",
        "\tDATE(`O`.`FECHA`) AS `FECHA_MNT_10000`,\n",
        "\t`R`.`AGENCIA` AS `AGENCIA_MNT_10000`,\n",
        "\t`U`.`TECNICO_ASESOR` AS `TECNICO_ASESOR_MNT_10000`\n",
        "FROM\n",
        "\t((((((((((((((((((((`FC_VENTA_VS_MANTENIMIENTO` as `A`\n",
        "LEFT JOIN `DIM_EMPRESA` as `B` ON\n",
        "\t(`A`.`SK_EMPRESA` = `B`.`SK_EMPRESA`))\n",
        "LEFT JOIN `DIM_FECHA` as `C` ON\n",
        "\t(`A`.`SK_FECHA` = `C`.`SK_FECHA`))\n",
        "LEFT JOIN `DIM_TIPO_DOCUMENTO` as `D` ON\n",
        "\t(`A`.`SK_TIPO_DOCUMENTO` = `D`.`SK_TIPO_DOCUMENTO`))\n",
        "LEFT JOIN `DIM_VENDEDOR` as `E` ON\n",
        "\t(`A`.`SK_VENDEDOR` = `E`.`SK_VENDEDOR`))\n",
        "LEFT JOIN `DIM_TIPO_FINANCIACION` as `F` ON\n",
        "\t(`A`.`SK_TIPO_FINANCIACION` = `F`.`SK_TIPO_FINANCIACION`))\n",
        "LEFT JOIN `DIM_FINANCIACION_VH` as `G` ON\n",
        "\t(`A`.`SK_FINANCIACION` = `G`.`SK_FINANCIACION`))\n",
        "LEFT JOIN `DIM_AGENCIA` as `H` ON\n",
        "\t(`A`.`SK_AGENCIA` = `H`.`SK_AGENCIA`))\n",
        "LEFT JOIN `DIM_AGENCIA` as `I` ON\n",
        "\t(`A`.`SK_AGENCIA_FACTURA` = `I`.`SK_AGENCIA`))\n",
        "LEFT JOIN `DIM_LINEA_NEGOCIO` as `J` ON\n",
        "\t(`A`.`SK_LINEA_NEGOCIO` = `J`.`SK_LINEA_NEGOCIO`))\n",
        "LEFT JOIN `DIM_FECHA` as `K` ON\n",
        "\t(`A`.`SK_FECHA_SALIDA` = `K`.`SK_FECHA`))\n",
        "LEFT JOIN `DIM_VEHICULO` as `L` ON\n",
        "\t(`A`.`SK_VEHICULO` = `L`.`SK_VEHICULO`))\n",
        "LEFT JOIN `DIM_FECHA` as `M` ON\n",
        "\t(`A`.`SK_FECHA_MANTENIMIENTO_1000` = `M`.`SK_FECHA`))\n",
        "LEFT JOIN `DIM_FECHA` as `N` ON\n",
        "\t(`A`.`SK_FECHA_MANTENIMIENTO_5000` = `N`.`SK_FECHA`))\n",
        "LEFT JOIN `DIM_FECHA` as `O` ON\n",
        "\t(`A`.`SK_FECHA_MANTENIMIENTO_10000` = `O`.`SK_FECHA`))\n",
        "LEFT JOIN `DIM_AGENCIA` as `P` ON\n",
        "\t(`A`.`SK_AGENCIA_MNT1` = `P`.`SK_AGENCIA`))\n",
        "LEFT JOIN `DIM_AGENCIA` as `Q` ON\n",
        "\t(`A`.`SK_AGENCIA_MNT5` = `Q`.`SK_AGENCIA`))\n",
        "LEFT JOIN `DIM_AGENCIA` as `R` ON\n",
        "\t(`A`.`SK_AGENCIA_MNT10` = `R`.`SK_AGENCIA`))\n",
        "LEFT JOIN `DIM_TECNICO_ASESOR` as `S` ON\n",
        "\t(`A`.`SK_TECNICO_ASESOR1` = `S`.`SK_TECNICO_ASESOR`))\n",
        "LEFT JOIN `DIM_TECNICO_ASESOR` as `T` ON\n",
        "\t(`A`.`SK_TECNICO_ASESOR5` = `T`.`SK_TECNICO_ASESOR`))\n",
        "LEFT JOIN `DIM_TECNICO_ASESOR` as `U` ON\n",
        "\t(`A`.`SK_TECNICO_ASESOR10` = `U`.`SK_TECNICO_ASESOR`)) ;\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "## Analisis exploratorio de datos\n",
        "\n",
        "### Carga e Inspección Inicial de los Datos:\n"
      ],
      "id": "5583e67d"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: read_data\n",
        "#| warning: false\n",
        "\n",
        "from ssconnect import connect_singlestore\n",
        "import pandas as pd\n",
        "\n",
        "engine = connect_singlestore()\n",
        "sql=\"SELECT * FROM DWH.VW_VENTA_VS_MANTENIMIENTO \"\n",
        "df= pd.read_sql(sql, engine)\n",
        "\n",
        "#Mostrar las primeras filas del dataset para tener una visión general.\n",
        "\n",
        "df.head()"
      ],
      "id": "read_data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: data_info\n",
        "#| warning: false\n",
        "\n",
        "import datetime as dt\n",
        "# Convertir la columna 'FECHA' a tipo datetime\n",
        "\n",
        "# Verificar el tamaño del dataset (número de filas y columnas).\n",
        "print(f\"Dataset shape: {df.shape}\")\n",
        "# Número de registros por año \n",
        "df['FECHA'] = pd.to_datetime(df['FECHA'], format='%Y-%m-%d', errors='coerce')\n",
        "df['FECHA'].dt.year.value_counts().sort_index(ascending=False)"
      ],
      "id": "data_info",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Número de Ventas y Mantenimientos por Año\n",
        "\n",
        "Desde la parte de vista comercial, las ventas se contabilizan como la suma de las facturas menos las notas de crédito o devolución.\n"
      ],
      "id": "151ebfc4"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: num_ventas_comercial\n",
        "#| warning: false\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Gráfico de barras, número de ventas por año, sumar facturas y restar notas de crédito \n",
        "df['AÑO'] = df['FECHA'].dt.year\n",
        "df['CONT'] = df['TIPO_DOCUMENTO'].apply(lambda x: 1 if x == 'FACTURA CREDITO' else -1)\n",
        "\n",
        "# Calcular el número total de ventas por año  y mes \n",
        "ventas_por_año = df.groupby('AÑO')['CONT'].sum()\n",
        "# Crear el gráfico de linea \n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter(x=ventas_por_año.index, y=ventas_por_año.values, mode='lines+markers', name='Ventas Totales'))\n",
        "fig.update_layout(title='Número de Ventas por Año', xaxis_title='Año', yaxis_title='Número de Ventas')\n",
        "fig.show()"
      ],
      "id": "num_ventas_comercial",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Para el presente análisis, se considera las ventas efectivas, es decir, las ventas que no han sido devueltas o anuladas. Para ello, se considera el campo fecha de salida, el cual indica la fecha en la que el vehículo salió de la agencia.\n"
      ],
      "id": "db6dddf1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: num_ventas_efectivas\n",
        "#| warning: false\n",
        "\n",
        "# Gráfico de barras, número de ventas efectivas por año, filtrar por fecha de salida que debe ser mayor a 1970-01-01\n",
        "df['FECHA_SALIDA'] = pd.to_datetime(df['FECHA_SALIDA'], format='%Y-%m-%d', errors='coerce')\n",
        "df_vtas= df[df['FECHA_SALIDA'] > dt.datetime(1970, 1, 1)]\n",
        "\n",
        "# Calcular el número total de ventas efectivas por año  y mes\n",
        "ventas_efectivas_por_año = df_vtas.groupby('AÑO')['CONT'].sum()\n",
        "# Crear el gráfico de linea\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter(x=ventas_efectivas_por_año.index, y=ventas_efectivas_por_año.values, mode='lines+markers', name='Ventas Efectivas'))\n",
        "fig.update_layout(title='Número de Ventas Efectivas por Año', xaxis_title='Año', yaxis_title='Número de Ventas Efectivas')\n",
        "fig.show()"
      ],
      "id": "num_ventas_efectivas",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Se considera como fecha pivot de analisis, la fecha de salida del vehículo. Se excluye los vehciulos que se han entregado en el año 2025.\n"
      ],
      "id": "b6e8e3a0"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: num_vehiculos_entrega\n",
        "#| warning: false\n",
        "# Gráfico de barras, número de vehículos entregados por año, filtrar por fecha de salida que debe ser mayor a 1970-01-01\n",
        "df['FECHA_SALIDA'] = pd.to_datetime(df['FECHA_SALIDA'], format='%Y-%m-%d', errors='coerce')\n",
        "df_vtas= df[df['FECHA_SALIDA'] > dt.datetime(1970, 1, 1)]\n",
        "df_vtas= df_vtas[df_vtas['FECHA_SALIDA'].dt.year != 2025]\n",
        "df_vtas['AÑO']= df_vtas['FECHA_SALIDA'].dt.year\n",
        "# Calcular el número total de vehículos entregados por año  \n",
        "vehiculos_entregados_por_año = df_vtas.groupby('AÑO')['CONT'].count()\n",
        "# Crear el gráfico de linea\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter(x=vehiculos_entregados_por_año.index, y=vehiculos_entregados_por_año.values, mode='lines+markers', name='Vehículos Entregados'))\n",
        "fig.update_layout(title='Número de Vehículos Entregados por Año', xaxis_title='Año', yaxis_title='Número de Vehículos Entregados')\n",
        "fig.show()"
      ],
      "id": "num_vehiculos_entrega",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Vechículos con mantenimiento de 1000 km\n"
      ],
      "id": "d0f6aa2e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: num_vehiculos_mant_1000\n",
        "#| warning: false\n",
        "\n",
        "\n",
        "# Gráfico de barras, número de vehículos con mantenimiento de 1000 km por año, filtrar por fecha de salida que debe ser mayor a 1970-01-01\n",
        "df['FECHA_SALIDA'] = pd.to_datetime(df['FECHA_SALIDA'], format='%Y-%m-%d', errors='coerce')\n",
        "df_vtas= df[df['FECHA_SALIDA'] > dt.datetime(1970, 1, 1)]\n",
        "df_vtas= df_vtas[df_vtas['FECHA_SALIDA'].dt.year != 2025]\n",
        "df_vtas['AÑO']= df_vtas['FECHA_SALIDA'].dt.year\n",
        "# Calcular el número total de vehículos con mantenimiento de 1000 km por año , columna MANTENIMIENTO_1000 mayor que 0\n",
        "\n",
        "vehiculos_mant_1000_por_año = df_vtas[df_vtas['MANTENIMIENTO_1000'] > 0].groupby('AÑO')['MANTENIMIENTO_1000'].count()\n",
        "# Crear el gráfico de linea\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter(x=vehiculos_mant_1000_por_año.index, y=vehiculos_mant_1000_por_año.values, mode='lines+markers', name='Vehículos con Mantenimiento 1000 km'))  \n",
        "fig.update_layout(title='Número de Vehículos con Mantenimiento de 1000 km por Año', xaxis_title='Año', yaxis_title='Número de Vehículos con Mantenimiento 1000 km')\n",
        "fig.show()"
      ],
      "id": "num_vehiculos_mant_1000",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| label: porc_vehiculos_mant_1000\n",
        "#| warning: false\n",
        "\n",
        "# Gráfico de barras, porcentaje de vehículos con mantenimiento de 1000 km por año, filtrar por fecha de salida que debe ser mayor a 1970-01-01\n",
        "df['FECHA_SALIDA'] = pd.to_datetime(df['FECHA_SALIDA'], format='%Y-%m-%d', errors='coerce')\n",
        "df_vtas= df[df['FECHA_SALIDA'] > dt.datetime(1970, 1, 1)]\n",
        "df_vtas= df_vtas[df_vtas['FECHA_SALIDA'].dt.year != 2025]\n",
        "df_vtas['AÑO']= df_vtas['FECHA_SALIDA'].dt.year\n",
        "# Calcular el número total de vehículos con mantenimiento de 1000 km por año , columna MANTENIMIENTO_1000 mayor que 0\n",
        "vehiculos_mant_1000_por_año = df_vtas[df_vtas['MANTENIMIENTO_1000'] > 0].groupby('AÑO')['MANTENIMIENTO_1000'].count()\n",
        "# Calcular el número total de vehículos entregados por año\n",
        "vehiculos_entregados_por_año = df_vtas.groupby('AÑO')['CONT'].count()\n",
        "# Calcular el porcentaje de vehículos con mantenimiento de 1000 km por año\n",
        "porcentaje_vehiculos_mant_1000_por_año = (vehiculos_mant_1000_por_año / vehiculos_entregados_por_año) * 100\n",
        "# Crear el gráfico de linea\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter(x=porcentaje_vehiculos_mant_1000_por_año.index, y=porcentaje_vehiculos_mant_1000_por_año.values, mode='lines+markers', name='Porcentaje de Vehículos con Mantenimiento 1000 km'))\n",
        "fig.update_layout(title='Porcentaje de Vehículos con Mantenimiento de 1000 km por Año', xaxis_title='Año', yaxis_title='Porcentaje de Vehículos con Mantenimiento 1000 km')\n",
        "fig.show()"
      ],
      "id": "porc_vehiculos_mant_1000",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/byronvinueza/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}